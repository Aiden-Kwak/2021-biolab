/* --------------------------------------------------------------
   Multi-compartment simulations of neocortical neurons
   DEMO
  
   Z. F. Mainen and T. J. Sejnowski (1996) Influence of dendritic
   structure on firing pattern in model neocortical neurons. 
   Nature 382: 363-366. 
   
   Demo of Figure 1.

   updated: 11/1/96
   author:
   Zach Mainen
   zach@salk.edu or zach@cshl.org


   Corrections to methods of Figure 1 misprinted in paper:

   1. Time step = 25 usec, not 250 usec
   
   2. I_Na rate functions are all shifted 5 mV negative
   m:
   alpha = 0.182(v+30)/(1-exp(-(v+30)/9))
   beta = -0.124(v+30)/(1-exp((v+30)/9))
   h:
   alpha = 0.024(v+45)/(1-exp(-(v+45)/5))
   beta = -0.0091(v+70)/(1-exp((v+70)/5))
   beta_inf = 1/(1+exp(v+60)/6.2)

   3. I_Ca activation not inactivation  is given first 

   4. I_Km rates 
   alpha =  0.001 (v+30)/(1-exp(-(v+30)/9))
   beta =   0.001 (v+30)/(1-exp((v+30)/9)

   5. g_kca = 3 (pS um^-2)

   Correction to Figure 4:

   "transfer impedance" should be "transfer conductance"
   Z^-1 = I/V (uS) 
   
Minor revisions to GUI code by Ted Carnevale 2/2011
to use load_file rather than load_proc,
and to control locations of RunControl panel, 
model selection panel, voltage axis graph, 
and PlotShape.
 
   -------------------------------------------------------------- */

load_file("nrngui.hoc")

objref sh, st, axonal, dendritic, dendritic_only

create soma
access soma

tstop = 1000
steps_per_ms = 40
dt = 0.025


// --------------------------------------------------------------
// passive & active membrane 
// --------------------------------------------------------------

ra        = 150
global_ra = ra
rm        = 30000
c_m       = 0.75
cm_myelin = 0.04
g_pas_node = 0.02

v_init    = -70
celsius   = 37

Ek = -90
Ena = 60


gna_dend = 20
gna_node = 30000
gna_soma = gna_dend

gkv_axon = 2000
gkv_soma = 200

gca = .3
gkm = .1
gkca = 3

gca_soma = gca
gkm_soma = gkm
gkca_soma = gkca
 

// --------------------------------------------------------------
// Axon geometry
//
// Similar to Mainen et al (Neuron, 1995)
// --------------------------------------------------------------

n_axon_seg = 13

create soma,iseg,hill,myelin[2],node[2]




// after http://www.neuron.yale.edu/phpbb/viewtopic.php?f=8&t=858
func secarea() { local x, sum //surface area soma
  sum = 0
  for (x,0) sum += area(x)
  return sum
}

proc create_axon() {

  create iseg,hill,myelin[n_axon_seg],node[n_axon_seg]

  soma {
    equiv_diam = sqrt(secarea()/(4*PI))
    //area = equiv_diam^2*4*PI
    //or using access
  }
  if (numarg()) equiv_diam = $1

  iseg {                // initial segment between hillock + myelin
     L = 15
     nseg = 5
     diam = equiv_diam/10        // see Sloper and Powell 1982, Fig.71
  }

  hill {                
    L = 10//*
    nseg = 5
    diam(0:1) = 4*iseg.diam:iseg.diam
  }

  // construct myelinated axon with nodes of ranvier

  for i=0,n_axon_seg-1 {
    myelin[i] {         // myelin element
      nseg = 5
      L = 100
      diam = iseg.diam         
    }
    node[i] {           // nodes of Ranvier
      nseg = 1
      L = 1.0           
      diam = iseg.diam*.75       // nodes are thinner than axon
    }
  }

  soma connect hill(0), 0.5
  hill connect iseg(0), 1
  iseg connect myelin[0](0), 1
  myelin[0] connect node[0](0), 1

  for i=0,n_axon_seg-2  { 
      node[i] connect myelin[i+1](0), 1 
      myelin[i+1] connect node[i+1](0), 1
  }
}


// --------------------------------------------------------------
// Spines
// --------------------------------------------------------------

      // Based on the "Folding factor" described in
      // Jack et al (1989), Major et al (1994)
      // note, this assumes active channels are present in spines 
      // at same density as dendrites

spine_dens = 1
      // just using a simple spine density model due to lack of data on some 
      // neuron types.

spine_area = 0.83 // um^2  -- K Harris

proc add_spines() { local a
  forsec $o1 {
    a =0
    for(x) a=a+area(x)

    F = (L*spine_area*spine_dens + a)/a

    L = L * F^(2/3)
    for(x) diam(x) = diam(x) * F^(1/3)
  }
}



proc init_cell() {

  // passive
  forall {
    insert pas
    Ra = ra 
    cm = c_m 
    g_pas = 1/rm
    e_pas = v_init
  }

  // exceptions along the axon
  forsec "myelin" cm = cm_myelin
  forsec "node" g_pas = g_pas_node

  // na+ channels
  forall insert na
  forsec dendritic gbar_na = gna_dend
  forsec "myelin" gbar_na = gna_dend
  hill.gbar_na = gna_node
  iseg.gbar_na = gna_node
  forsec "node" gbar_na = gna_node

  // kv delayed rectifier channels
  iseg { insert kv  gbar_kv = gkv_axon }
  hill { insert kv  gbar_kv = gkv_axon }
  soma { insert kv  gbar_kv = gkv_soma }

  // dendritic channels
  forsec dendritic {
    insert km    gbar_km  = gkm
    insert kca   gbar_kca = gkca
    insert ca    gbar_ca = gca
    insert cad
  }

  soma {
    gbar_na = gna_soma
    gbar_km = gkm_soma
    gbar_kca = gkca_soma
    gbar_ca = gca_soma
  }

 
  forall if(ismembrane("k_ion")) ek = Ek
  forall if(ismembrane("na_ion")) {
    ena = Ena
    // seems to be necessary for 3d cells to shift Na kinetics -5 mV
    vshift_na = -5
  }
  forall if(ismembrane("ca_ion")) {
    eca = 140
    ion_style("ca_ion",0,1,0,0,0)
    vshift_ca = 0
  }
}

proc load_3dcell() {

// $s1 filename

  aspiny = 0
  forall delete_section()
  xopen($s1)
  access soma

  dendritic = new SectionList()

  // make sure no compartments exceed 50 uM length
  forall {
    diam_save = diam
    n = L/50
    nseg = n + 1
    if (n3d() == 0) diam = diam_save
    dendritic.append()
  }    

  // show cell
/*
  sh = new PlotShape()
  sh.size(-300,300,-300,300)
*/
  // but control position of PlotShape window -- Ted Carnevale
  sh = new PlotShape(0)
  sh.size(-300,300,-299.522,299.522)
  sh.variable("v")
  {sh.view(-300, -299.522, 600, 599.043, 265, 369, 200.64, 200.32)}

  dendritic_only = new SectionList()
  forsec dendritic dendritic_only.append()
  soma  dendritic_only.remove()

  create_axon()


  init_cell()

  if (!aspiny) add_spines(dendritic_only,spine_dens)

  forall insert extracellular
  //st=new IClamp(.5)
  //st.dur = 900
  //st.del = 5
}

// GUI

// run control panel

{
xpanel("RunControl")
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
xvalue("t","t", 2 )
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
xvalue("dt","dt", 1,"setdt()", 0, 1 )
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(0,105)
}

// menu of models
/*
proc fig1a() {
  load_3dcell("cells/lcAS3.hoc")
  st.amp = 0.05
}

proc fig1b() {
  load_3dcell("cells/j7.hoc")  
  st.amp = 0.07
}

proc fig1c() {
  load_3dcell("cells/j8.hoc")
  st.amp = 0.1
}

proc fig1d() {
  load_3dcell("cells/j4a.hoc") 
  st.amp = 0.2
}

xpanel("Figure 1")
xbutton("a. L3 Aspiny","fig1a()")
xbutton("b. L4 Stellate","fig1b()")
xbutton("c. L3 Pyramid","fig1c()")
xbutton("d. L5 Pyramid","fig1d()")
xpanel(159,481)
*/

load_3dcell("cells/j8.hoc")
//load_3dcell("cells/j4a.hoc")
// graph of v(0.5) vs. t

objref g

{
g = new Graph(0)
g.size(0,1000,-80,40)
{g.view(0, -80, 1000, 120, 265, 105, 300.48, 200.32)}
graphList[0].append(g)
g.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}



objref diam3dvec
diam3dvec=new Vector()
proc changediam(){local i,j,factor
  forall {for i=0,n3d()-1{diam3dvec.append(diam3d(i))}
  //diam3d= Returns the diameter of the ith 3d point of the currently accessed section.
  }
  j=0
  factor=$1
  forall{
    for i=0,n3d()-1{
      pt3dchange(i,factor*diam3dvec.x[j])
      j+=1
    }
    soma.diam=29.8
  }
}

//changediam(30)

// n3d(): Return the number of 3d locations stored in the currently accessed section.
// x3d(): Returns the x coordinate of the ith point in the 3-d list of the currently accessed section.
objref f, veclist, xx, yy,zz, length, range, xint, yint, zint, center_pt, tvec,pvec,tmpvec
tvec = new Vector()
pvec = new Vector()
tmpvec = new Vector()
f = new File()


proc stim(){local ii, nn, xr, PMAX, index

  f.ropen("P_L3.txt")
  veclist = new List()

   forall {
      //print "ONE"
      define_shape()
      nn = n3d() //섹션개수
      xx = new Vector(nn) //1차원 배열생성
      yy = new Vector(nn) 
      zz = new Vector(nn)
      length = new Vector(nn)
    
      for ii = 0,nn-1 {
         xx.x[ii] = x3d(ii)
         yy.x[ii] = y3d(ii)
         zz.x[ii] = z3d(ii)
         length.x[ii] = arc3d(ii) 
    }
      // to use Vector class's .interpolate() 
      // must first scale the independent variable
      // i.e. normalize length along centroid
      //print "TWO"
      length.div(length.x[nn-1])//??? 
      //vector.div(): Divide each element of vsrcdest either by a scalar 
      //or by the corresponding elements of vec1. vsrcdest and vec1 must have the same size.

      // initialize the destination "independent" vector
      range = new Vector(nseg+2)
      range.indgen(1/nseg)// 벡터를 일련의 값으로 채운다
      range.sub(1/(2*nseg))
      range.x[0]=0
      range.x[nseg+1]=1
      //print "THREE"
    // length contains the normalized distances of the pt3d points 
      // along the centroid of the section.  These are spaced at 
      // irregular intervals.
      // range contains the normalized distances of the nodes along the 
      // centroid of the section.  These are spaced at regular intervals.
      // Ready to interpolate.
  
      xint = new Vector(nseg+2)
      yint = new Vector(nseg+2)
      zint = new Vector(nseg+2)

      xint.interpolate(range, length, xx)//?
      yint.interpolate(range, length, yy)
      zint.interpolate(range, length, zz)
      
      center_pt = new Vector(3)

      //print "FOUR"
      for ii = 1, nseg {

         xr = range.x[ii]
         center_pt.x[0] = xint.x[ii]
         center_pt.x[1] = yint.x[ii]
         center_pt.x[2] = zint.x[ii]

         //print "FIVE"
         PMAX = f.scanvar()*$1
         tvec.resize(6)
         pvec.resize(6)
         { tvec.x[0]=0     pvec.x[0]=0 }  // field is 0 for 1 ms 
         { tvec.x[1]=10   pvec.x[1]=0 }
         { tvec.x[2]=10   pvec.x[2]=PMAX }  // jumps to some value
         { tvec.x[3]=110   pvec.x[3]=PMAX }  //   for 1 ms
         { tvec.x[4]=110  pvec.x[4]=0 }  // falls back to 0 ever after
         { tvec.x[5]=120  pvec.x[5]=0 }
         
         
         tmpvec = pvec.c
            
         tmpvec.play(&e_extracellular(xr), tvec)
         veclist.append(tmpvec)
      
    }
  }
    f.close()
//print "Seven"
  
}



objref sv_vec, f2
update_nn1 = 0
update_nn2 = 0
secnameNum = 0
f2 = new File()

proc coord() { local ii, nn, kk, xr

  forall{
    define_shape()
    nn= n3d()
    update_nn1 += nseg
    secnameNum += 1
    //printf(" %d \n",update_nn1)
  }
  //printf("%d \n ", secnameNum)
  
  sv_vec = new Matrix(update_nn1, 3)
	forall {
    
		// get the data for the section
		nn = n3d()
		//print nn
		//print secname()
		xx = new Vector(nn)
		yy = new Vector(nn)
		zz = new Vector(nn)
		length = new Vector(nn)
    

    //printf("%s: %d \n", secname(), nn)

    //printf("%s: %d %d \n", secname(), nn, nseg)

		for ii = 0,nn-1 {
			xx.x[ii] = x3d(ii)
			yy.x[ii] = y3d(ii)
			zz.x[ii] = z3d(ii)
			length.x[ii] = arc3d(ii) 
    }
		// to use Vector class's .interpolate() 
		// must first scale the independent variable
		// i.e. normalize length along centroid
		
		length.div(length.x[nn-1])

		// initialize the destination "independent" vector
		range = new Vector(nseg+2)
		range.indgen(1/nseg)
		range.sub(1/(2*nseg))
		range.x[0]=0
		range.x[nseg+1]=1

    // length contains the normalized distances of the pt3d points 
		// along the centroid of the section.  These are spaced at 
		// irregular intervals.
		// range contains the normalized distances of the nodes along the 
		// centroid of the section.  These are spaced at regular intervals.
		// Ready to interpolate.
  
		xint = new Vector(nseg+2)
		yint = new Vector(nseg+2)
		zint = new Vector(nseg+2)

		xint.interpolate(range, length, xx)
		yint.interpolate(range, length, yy)
		zint.interpolate(range, length, zz)
    
    //print secname()
	  //print nseg
		
		center_pt = new Vector(3)

		for ii = 1, nseg {
			xr = range.x[ii]
			center_pt.x[0] = xint.x[ii]
			center_pt.x[1] = yint.x[ii]
      center_pt.x[2] = zint.x[ii]

      sv_vec.x[update_nn2+ii-1][0]= xint.x[ii]
      sv_vec.x[update_nn2+ii-1][1] = yint.x[ii]
      sv_vec.x[update_nn2+ii-1][2] = zint.x[ii]
    
    //print secname()
    //printf("%f %f %f \n",center_pt.x[0], center_pt.x[1], center_pt.x[2])
    }
    update_nn2 += nseg
  
    }
    f2.wopen("coord_L3_PN_13.txt")
    sv_vec.fprint(f2)
    f2.close()
}

objref apc 
soma apc = new APCount(0.5)//--6
//cACint209_L4_LBC_baa757490e[0].soma[0] apc = new APCount(0.5) //11
//cADpyr232_L5_TTPC2_8052133265[0].soma[0] apc = new APCount(0.5)//15

  objref f2, thresh_val
  f2=new File()
  thresh_val = new Vector(2029)


proc find_thresh(){local i,n,j,ii,DEL,DUR
  
   for i=1,10{//100의 자리
      stim(i*100)
      run()

      if(apc.n>0){
         //printf("%dV/m, spike\n",i*100)

         for j=1,10{//10의 자리 (n-1)00-n00
            stim((i-1)*100+j*10)
            run()
            if(apc.n>0){
               //printf("%dV/m, spike\n",(i-1)*100+j*10)
               for ii=1,10{ //1의 자리
                  AP_thresh=(i-1)*100+(j-1)*10+ii
                  stim(AP_thresh)
                  run()
               
                  if(apc.n>0){
                     printf("%d\n", AP_thresh)
                     f2.printf("%.1f,%d\n",iter, AP_thresh)
                  break
               }
               }
            break
            }
         }
      break
      }
   }
}
//axon, soma., seaborn 이용

proc mfileThresDendDiam(){

  strdef file_name
  file_name="threshold_dend.csv"
  iter=1
  printf("threshold_dend\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=1,10{
    find_thresh()
    iter+=0.1
    //printf("-----------------\n")
    changediam(iter)

  }
  f2.close()
}

proc mfileThresSomaDiam(){

  strdef file_name
  file_name="threshold_soma.csv"
  access soma
  iter=1
  printf("threshold_soma\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=1,10{
    find_thresh()
    iter+=0.1
    //printf("-----------------\n")
    soma.diam*=iter
  }
  f2.close()
}


proc mfileThresAxonDiam(){

  strdef file_name
  file_name="threshold_axon.csv"
  iter=1
  printf("threshold_axon\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=0,12{
    access myelin[i]
  }
  for i=0,10{
    find_thresh()
    iter+=0.1
    //printf("-----------------\n")
    changediam(iter)
  }
  f2.close()
}

proc mfileThresAxonDiam_2(){
//수정필요 for문 
  strdef file_name
  file_name="threshold_axon_2.csv"
  iter=1
  printf("threshold_axon_2\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=0,12{
    access myelin[i]
    for j=0,10{
      myelin[j].diam*=iter
      find_thresh()
      iter+=0.1
      //printf("-----------------\n")
    }  
  }
  
  f2.close()
}


//<--------------------------------------------------------->

proc mfileThresDendDiam_rdc(){

  strdef file_name
  file_name="threshold_dend_rdc.csv"
  iter=1
  printf("threshold_dend_rdc\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=1,10{
    find_thresh()
    iter-=0.1
    //printf("-----------------\n")
    changediam(iter)

  }
  f2.close()
}

proc mfileThresSomaDiam_rdc(){

  strdef file_name
  file_name="threshold_soma_rdc.csv"
  access soma
  iter=1
  printf("threshold_soma_rdc\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=1,10{
    find_thresh()
    iter-=0.1
    //printf("-----------------\n")
    soma.diam*=iter
  }
  f2.close()
}


proc mfileThresAxonDiam_rdc(){

  strdef file_name
  file_name="threshold_axon.csv"
  iter=1
  printf("threshold_axon\n")
  f2.wopen(file_name)
  f2.printf("diam,threshold\n")
  for i=0,12{
    access myelin[i]
  }
  for i=0,10{
    find_thresh()
    iter-=0.1
    //printf("-----------------\n")
    changediam(iter)
  }
  f2.close()
}




